[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://cduomq68kibjf"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/chekerboardPattern.gd" id="1_7wf2n"]
[ext_resource type="Script" path="res://addons/shaderV/uv/scaleUV.gd" id="2_n3x4y"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_urnlr"]
output_port_for_preview = 1
default_input_values = [1, Vector3(16, 8, 0), 2, Vector3(0.6, 0.6, 0.6), 3, 1.0]
initialized = true
script = ExtResource("1_7wf2n")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3qtjp"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_omvf6"]
default_input_values = [1, Vector3(0.1, 0.1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("2_n3x4y")

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;



// CheckerboardShape
float _checkerboardPatternFunc(vec2 uv, vec2 _checker_size){
	float fmodRes = mod(floor(_checker_size.x * uv.x) + floor(_checker_size.y * uv.y), 2.0);
	return max(sign(fmodRes), 0.0);
}

void fragment() {
// Input:3
	vec2 n_out3p0 = SCREEN_UV;


	vec3 n_out2p0;
	float n_out2p1;
// CheckerboardShape:2
	vec3 n_in2p1 = vec3(16.00000, 8.00000, 0.00000);
	vec3 n_in2p2 = vec3(0.60000, 0.60000, 0.60000);
	float n_in2p3 = 1.00000;
	{
		n_out2p0 = n_in2p2;
		n_out2p1 = _checkerboardPatternFunc(vec3(n_out3p0, 0.0).xy, n_in2p1.xy) * n_in2p3;
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(480, 220)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_urnlr")
nodes/fragment/2/position = Vector2(220, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_3qtjp")
nodes/fragment/3/position = Vector2(-240, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_omvf6")
nodes/fragment/4/position = Vector2(40, 360)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 2, 0)
